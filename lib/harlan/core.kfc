;; This is the core module. It is loaded into every Harlan program.

(module

  (extern open_outfile (str) -> (ptr ofstream))
  (extern close_outfile ((ptr ofstream)) -> void)

  (extern time-s () -> float)

  (extern command-line () -> (vec str))
  
  (define-macro cond (else)
    ((_ (else body))
     body)
    ((_ (test body))
     (if test body))
    ((_ (test body) rest ...)
     (if test body (cond rest ...))))

  (define-macro let* ()
    ((_ () b ...) (begin b ...))
    ((_ ((x e) (x* e*) ...) b ...)
     (let ((x e))
       (let* ((x* e*) ...) b ...))))

  (define-macro for ()
    ((_ (i start stop) body ...)
     (for (i start stop 1) body ...))
    ((_ (i start stop step) body ...)
     (let ((i start)
           (stepv step)
           (stopv stop))
       (while (< i stopv)
         body ...
         (set! i (+ i stepv))))))

  (define-macro kernel* ()
    ((_ ((x e)) b)
     (kernel ((x e)) b))
    ((_ ((x e) (x* e*) ...) b)
     (kernel ((x e))
       (kernel* ((x* e*) ...) b))))
  
  (define-macro inner-reduce (kernel)
    ;; This first one fuses reduce of a kernel.
    ((_ op (kernel ((x e) (x* e*) ...) b))
     (let ((x e) (x* e*) ...)
       (let ((t (let ((x (vector-ref x 0))
                      (x* (vector-ref x* 0)) ...)
                  b)))
         (for (i 1 (length x))
           (set! t (op t (let ((x (vector-ref x i))
                               (x* (vector-ref x* i)) ...)
                           b))))
         t)))
    ((_ op e)
     (let ((x e))
       (let ((t (vector-ref x 0)))
         (for (i 1 (length x))
           (set! t (op t (vector-ref x i))))
         t))))
  
  (define-macro reduce (kernel)
    ;; Comment out this next clause to enable faster reduction.
    ;;((_ op e)
    ;; (inner-reduce op e))
    ((_ op (kernel ((x e) (x* e*) ...) b))
     (let ((x e)
           (stride 65536))
       (if (< (length x) stride)
           (inner-reduce op (kernel ((x x) (x* e*) ...) b))
           (inner-reduce
            op
            (let ((x e) (x* e*) ...)
              (kernel ((i (iota stride)))
                (let ((t (let ((x (unsafe-vector-ref x i))
                               (x* (unsafe-vector-ref x* i)) ...)
                           b)))
                  (for (reduce-index (+ i stride) (length x) stride)
                    (set!
                     t
                     (op t
                         (let ((x (unsafe-vector-ref x reduce-index))
                               (x* (unsafe-vector-ref x* reduce-index)) ...)
                           b))))
                  t)))))))
    ((_ op e)
     (let ((x e)
           (stride 65536))
       (if (< (length x) stride)
           (inner-reduce op x)
           (let ((t (kernel ((i (iota stride)))
                         (let ((tmp (unsafe-vector-ref x i)))
                           (for (j (+ i stride) (length x) stride)
                             (set! tmp
                                   (op tmp (unsafe-vector-ref x j))))
                           tmp))))
             (inner-reduce op t))))))

  (define-macro sqrt ()
    ((_ x) (harlan_sqrt x)))

  (define-macro println ()
    ((_ e) (begin (print e) (print "\n")))
    ((_ e s) (let ((stream s)) (print e s) (print "\n" s))))

  (define-macro and ()
    ((_ e) e)
    ((_ e e* ...)
     (if e (and e* ...) #f)))

  (define-macro or ()
    ((_ e) e)
    ((_ e1 e2)
     (if e1 #t e2))
    ((_ e e* ...)
     (if e #t (or e* ...))))

  (define-macro print* ()
    ((_ e e* ...)
     (begin (print e) (print e*) ... )))

  (define-macro println* ()
    ((_ e)
     (println e))
    ((_ e e* ...)
     (begin (print e) (println* e* ...))))

  (define-macro print-vec ()
    ((_ v)
     (let ((t v))
       (print "[")
       (for (i 0 (length t))
         (begin
           (print " ")
           (print (vector-ref t i))))
       (print " ]"))))

  (define-macro println-vec ()
    ((_ v)
     (begin (print-vec v) (println ""))))
  )
