;; Breadth first search
;;
;; This is a version of bench-bfs-distance that has been modified to
;; use the same data files as bench-bfs-rodinia. 

(%testspec
 (%tags bench))

(module
  (import io)
  
  (extern get_kernel_time () -> u64)

  (define (elapsed-sec start end)
    (/ (u64->float (- end start)) 1e9))

 (define-datatype Node
   (Node int int))

 (define-datatype GraphPair
   (graph-cons int Graph))

 (define-datatype Graph
   (Graph int int (vec Node) (vec int)))


 (define (read-node f)
   (let* ((edges-start (file-read-int f))
          (num-edges   (file-read-int f)))
     (Node edges-start num-edges)))

 (define (read-all-nodes f no-of-nodes)
   (print "Reading nodes: ")
   (let ((nodes
          (kernel ((i (iota no-of-nodes)))
            (Node 0 0))))
     (for (i 0 no-of-nodes)
       ;; This line isn't supposed to work.
       (set! (vector-ref nodes i) (read-node f))
       (if (= 0 (mod i 100)) 
           (begin
             (print ".")
             (flush-stdout))))
     (print "\n")
     nodes))

 (define (read-all-edges f no-of-edges)
   (print "Reading edges: ")
   (let ((edges 
          (kernel ((i (iota no-of-edges)))
            0)))
     ;; (println "read-all-edges after kernel")
     (for (i 0 no-of-edges)
       (set! (vector-ref edges i) (file-read-int f))
       (if (= 0 (mod i 100))
           (begin
             (print ".")
             (flush-stdout)))
       ;; The second integer in the edge description is the cost (edge weight), and it is not used in BFS.
       (file-read-int f))
     (print "\n")
     edges))

 (define (read-graph file)
   (println "Reading graph.")
   (let* ((f (open-infile file))
          (no-of-nodes (file-read-int f))
          (nodes (read-all-nodes f no-of-nodes))
          (source (file-read-int f))
          (no-of-edges (file-read-int f))
          (edges (read-all-edges f no-of-edges)))
     (close-infile f)
     (println "Graph read.")
     (graph-cons source (Graph no-of-nodes no-of-edges nodes edges))))

 ;; We use the graph input functions from bench-bfs-rodinia basically
 ;; unmodified. They produce a graph in a different format than we
 ;; need, so this function converts it into the correct one.
 (define (convert-graph (Graph num-nodes num-edges nodes edges))
   (kernel ((n nodes))
     (match n
       ((Node edges-start num-edges)
        (kernel ((i (iota num-edges)))
          (vector-ref edges (+ i edges-start)))))))
 
 (define-datatype color
   (white)
   (gray)
   (black))
 
  (define (minimum x y)
    (if (< x y) x y))

  (define (iterate-distances graph distances)
    (println "iterate")
    (let ((new-distances
           (kernel ((i (iota (length graph))))
	     (minimum
	      (reduce minimum (kernel ((j (vector-ref graph i)))
				(+ (vector-ref distances j) 1)))
	      (vector-ref distances i)))))
      (println "computed new distances")
      (if (reduce and (kernel ((d1 new-distances)
			       (d2 distances))
			(= d1 d2)))
          distances
          (begin
            ;;(println new-colors)
            (iterate-distances graph new-distances)))))

  (define (bfs graph start)
    (let ((distances (kernel ((i (iota (length graph))))
                    (if (= i start)
                        0
                        (u64_max)))))
      ;;(println colors)
      (iterate-distances graph distances)))

  (define (print-cost cost file)
    (let ((stream (open_outfile file)))   
      (for (i 0 (length cost))
        (print i stream)
        (print ")" stream)
        (print " cost:" stream)
        (print (vector-ref cost i) stream)
        (print "\n" stream))
      (close_outfile stream)
      0))
  
  (define (main)
    (let ((args (command-line)))
      (if (not (= (length args) 3))
          (begin
            (println "Usage: bench-bfs-rodinia-distance input-file output-file")
            (assert #f)
            0)
          (let ((graph (read-graph (vector-ref args 1))))
            (match graph
              ((graph-cons start graph)
               (let* ((graph (convert-graph graph))
                      (result (bfs graph start)))
                 (print-cost result (vector-ref args 2)))))
            0)))))
