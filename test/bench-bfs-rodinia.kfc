;; BFS based on the rodinia benchmark

(%testspec
 (%tags bench))

(module
 (import random)
 (import io)
 (extern get_kernel_time () -> u64)

 (define (elapsed-sec start end)
   (/ (u64->float (- end start)) 1e9))

 (define-datatype Node
   (Node int int))

 (define (print-node (Node start num-edges) stream)
   (begin 
     (print start stream)
     (print " " stream)
     (print num-edges stream)
     (print "\n" stream)
     0))

 (define (node-num-of-edges (Node a b))
   b)
 
 (define (node-edges-start (Node a b))
   a)

 (define-datatype GraphPair
   (graph-cons int Graph))

 (define-datatype Graph
   (Graph int int (vec Node) (vec int)))

 (define (print-graph-to-file (Graph number-vert number-edge nodes edges) file)
   (let ((stream (open_outfile file)))
     (print "Number of vertices: " stream)
     (print number-vert stream)
     (print "\n" stream)
     (print "Number of edges:" stream)
     (print number-edge stream)
     (print "Nodes:\n" stream)
     (for (i 0 (length nodes) 1)
       (print-node (vector-ref nodes i) stream))
     (print "Edges:\n" stream)
     (for (i 0 (length edges) 1) 
       (print (vector-ref edges i) stream)
       (print "\n" stream))
     0))
 
 (define (graph-size (Graph number-vert number-edge nodes edges))
   number-vert)

 (define (graph-nodes (Graph number-vert number-edge nodes edges))
   nodes)

 (define (graph-edges (Graph number-vert number-edge nodes edges))
   edges)

 (define (get-node graph node-num)
    (assert (< node-num (graph-size graph)))
    (vector-ref (graph-nodes graph) node-num))

 (define-macro append ()
   ((_ A B)
    (let ((a A) (b B))
      (let ((lenA (length a))
	    (len (+ (length a) (length b))))
	(kernel ((i (iota len)))
	  (if (< i lenA)
	      (vector-ref a i)
	      (vector-ref b (- i lenA))))))))
 
 (define (read-node f)
   (Node (file-read-int f) (file-read-int f)))

 ;; This implemetation is painfuly slow.
 ;; (define (read-all-nodes f no-of-nodes)
 ;;   (let ((nodes (vector (read-node f))))
 ;;     (for (i 1 no-of-nodes)
 ;;       (set! nodes (append nodes (vector (read-node f)))))
 ;;     nodes))

 (define (read-all-nodes f no-of-nodes)
   (let ((nodes
	  ;; Is there a better way to construct a vector of Nodes of a certain length?
	  (kernel ((i (iota no-of-nodes)))
	    (Node 0 0))))
     (for (i 0 no-of-nodes)
       ;; I am not sure if the following line is supposed to work
       (set! (vector-ref nodes i) (read-node f)))
     nodes))

 (define (read-all-edges f no-of-edges)
   (let ((edges 
	  (kernel ((i (iota no-of-edges)))
	    0)))
     (for (i 0 no-of-edges)
       (set! (vector-ref edges i) (file-read-int f))
       ;; The second integer in the edge description is the cost (edge weight), and it is not used in BFS.
       (file-read-int f))
     edges))

 (define (read-graph file)
   (let* ((f (file-open file))
 	  (no-of-nodes (file-read-int f))
 	  (nodes (read-all-nodes f no-of-nodes))
 	  (source (file-read-int f))
 	  (no-of-edges (file-read-int f))
 	  (edges (read-all-edges f no-of-edges)))
     (file-close f)
     (graph-cons source (Graph no-of-nodes no-of-edges nodes edges))))
 
 (define (iterate-rodinia graph cost visited mask updating)
   (let ((stop (vector #t)))
     (while (vector-ref stop 0)
	(set! (vector-ref stop 0) #f)
	(kernel ((m mask) (i (iota (graph-size graph))))
	  (if m
	      (begin
		(set! (vector-ref mask i) #f)
		(let ((node (vector-ref (graph-nodes graph) i)))
		  (kernel ((j (iota (node-num-of-edges node))))
		    (let ((id (vector-ref (graph-edges graph) (+ j (node-edges-start node)))))
		      (set! (vector-ref cost id) (+ (vector-ref cost i) 1))
		      (set! (vector-ref updating id) #t)
		      0))))
	      0))
	(kernel ((u updating) (i (iota (graph-size graph))))
	  (if u
	      (begin (set! (vector-ref mask i) #t)
		     (set! (vector-ref visited i) #t)
		     (set! (vector-ref stop 0) #t)
		     (set! u #f)
		     0)
	      0)))
     0))

 (define (init-vector size v)
   (kernel ((i (iota size)))
     v))

 (define (init-vector-with-exception size v index e)
   (kernel ((i (iota size)))
     (if (= i index)
	 v
	 e)))

 ;; This function is exactly the same as init-vector-with-exception.  The only reason for its existence is to hack around lack of polymorphism.
 (define (init-vector-with-exception-int size v index e)
   (kernel ((i (iota size)))
     (if (= i index)
	 v
	 e)))

 (define (bfs (graph-cons source graph))
   (let ((size (graph-size graph)))
     (let ((cost (init-vector-with-exception-int size -1 source 0))
	   (visited (init-vector-with-exception size #f source #t))
	   (mask (init-vector-with-exception size #f source #t))
	   (updating (init-vector size #f)))
       (iterate-rodinia graph cost visited mask updating))))
	    
 (define (main)
   (let* ((args (command-line))
 	  (in-file (vector-ref args 1))
	  (graph-out-file (vector-ref args 2))
 	  (graph-source (read-graph in-file))
	  (graph (match graph-source
			((graph-cons source graph) graph))))
;;	  (source (match graph-source
;;			((graph-cons source graph) source)))
     (print-graph-to-file graph graph-out-file)
     0)))
