;; BFS based on the rodinia benchmark

(%testspec
 (%tags bench))

(module
 (import random)
 (import io)
 (extern get_kernel_time () -> u64)

 (define (elapsed-sec start end)
   (/ (u64->float (- end start)) 1e9))

 (define-datatype Node
   (Node int int))

 (define (print-node (Node start num-edges) stream)
   (begin 
     (print start stream)
     (print " " stream)
     (print num-edges stream)
     (print "\n" stream)
     0))

 (define (node-num-of-edges (Node a b))
   b)
 
 (define (node-edges-start (Node a b))
   a)

 (define-datatype GraphPair
   (graph-cons int Graph))

 (define-datatype Graph
   (Graph int int (vec Node) (vec int)))

 (define (print-graph-to-file (Graph number-vert number-edge nodes edges) file)
   (let ((stream (open_outfile file)))
     (print "Number of vertices: " stream)
     (print number-vert stream)
     (print "\n" stream)
     (print "Number of edges:" stream)
     (print number-edge stream)
     (print "\nNodes:\n" stream)
     (for (i 0 (length nodes) 1)
       (print-node (vector-ref nodes i) stream))
     (print "Edges:\n" stream)
     (for (i 0 (length edges) 1) 
       (print (vector-ref edges i) stream)
       (print "\n" stream))
     (close_outfile stream)
     0))
 
 (define (graph-size (Graph number-vert number-edge nodes edges))
   number-vert)

 (define (graph-nodes (Graph number-vert number-edge nodes edges))
   nodes)

 (define (graph-edges (Graph number-vert number-edge nodes edges))
   edges)

 (define (get-node graph node-num)
    (assert (< node-num (graph-size graph)))
    (vector-ref (graph-nodes graph) node-num))

 (define-macro append ()
   ((_ A B)
    (let ((a A) (b B))
      (let ((lenA (length a))
	    (len (+ (length a) (length b))))
	(kernel ((i (iota len)))
	  (if (< i lenA)
	      (vector-ref a i)
	      (vector-ref b (- i lenA))))))))
 
 (define (read-node f)
   ;; This was originally (Node (file-read-int f) (file-read-int f)).
   ;; Harlan does not define an order of evaluation, so we can't
   ;; guarantee that will work. let* does do this.
   (let* ((edges-start (file-read-int f))
          (num-edges   (file-read-int f)))
     (Node edges-start num-edges)))

 ;; This implemetation is painfuly slow.
 ;; (define (read-all-nodes f no-of-nodes)
 ;;   (let ((nodes (vector (read-node f))))
 ;;     (for (i 1 no-of-nodes)
 ;;       (set! nodes (append nodes (vector (read-node f)))))
 ;;     nodes))

 (define (read-all-nodes f no-of-nodes)
   (print "Reading nodes: ")
   (let ((nodes
	  ;; Is there a better way to construct a vector of Nodes of a certain length?
          ;;
          ;; > This is a pretty good way to do it. [ETH]
	  (kernel ((i (iota no-of-nodes)))
	    (Node 0 0))))
     (for (i 0 no-of-nodes)
       ;; I am not sure if the following line is supposed to work but it does
       (set! (vector-ref nodes i) (read-node f))
       (if (= 0 (mod i 100)) 
	   (begin
	     (print ".")
	     (flush-stdout))
	   ;; I put 0 for this arm of the if, but is there something better like unit or void? Should I use cond for one arm condition?
       ;;
       ;; > This is in effect position, so we don't even need both
       ;; arms. [ETH]
	   0))
     (print "\n")
     nodes))

 (define (read-all-edges f no-of-edges)
   (print "Reading edges: ")
   (let ((edges 
	  (kernel ((i (iota no-of-edges)))
	    0)))
     ;; (println "read-all-edges after kernel")
     (for (i 0 no-of-edges)
       (set! (vector-ref edges i) (file-read-int f))
       (if (= 0 (mod i 100))
           (begin
	     (print ".")
	     (flush-stdout))
           ;; I put 0 for this arm of the if, but is there something better like unit or void? Should I use cond for one arm condition?
           0)
       ;; The second integer in the edge description is the cost (edge weight), and it is not used in BFS.
       (file-read-int f))
     (print "\n")
     edges))

 (define (read-graph file)
   (println "Reading graph.")
   (let* ((f (open-infile file))
 	  (no-of-nodes (file-read-int f))
 	  (nodes (read-all-nodes f no-of-nodes))
 	  (source (file-read-int f))
 	  (no-of-edges (file-read-int f))
 	  (edges (read-all-edges f no-of-edges)))
     (close-infile f)
     (println "Graph read.")
     (graph-cons source (Graph no-of-nodes no-of-edges nodes edges))))
 
 (define (iterate-rodinia graph cost visited mask updating)
   (let ((stop (vector #t)))
     (while (vector-ref stop 0)
	(set! (vector-ref stop 0) #f)
	(println "Entering the first BFS kernel.")
	(println "visited before first kernel:")
	(println-vec visited)
	(println "cost before first kernel:")
	(println-vec cost)
	(println "mask before first kernel:")
	(println-vec mask)
	(println "updating before first kernel:")
	(println-vec updating)	
	(kernel ((m mask) (i (iota (graph-size graph))))
	  (if m
	      (begin
		(set! (vector-ref mask i) #f)
		(let ((node (vector-ref (graph-nodes graph) i)))
		  (kernel ((j (iota (node-num-of-edges node))))
		    (let ((id (vector-ref (graph-edges graph) (+ j (node-edges-start node)))))
		      (if (vector-ref visited j)
			  0
			  (begin
			    (set! (vector-ref cost id) (+ (vector-ref cost i) 1))
			    (set! (vector-ref updating id) #t)
			    0))))))
	      0))
	(println "visited after first kernel:")
	(println-vec visited)
	(println "cost after first kernel:")
	(println-vec cost)
	(println "mask after first kernel:")
	(println-vec mask)
	(println "updating after first kernel:")
	(println-vec updating)	
	(println "Entering the second BFS kernel.")
	(kernel ((u updating) (i (iota (graph-size graph))))
	  (if u
	      (begin 
		(set! (vector-ref mask i) #t)
		(set! (vector-ref visited i) #t)
		(set! (vector-ref stop 0) #t)
		(set! u #f)
		0)
	      0)))
     cost))

 (define (init-vector size v)
   (kernel ((i (iota size)))
     v))

 (define (init-vector-with-exception size v index e)
   (kernel ((i (iota size)))
     (if (= i index)
	 e
	 v)))

 ;; This function is exactly the same as init-vector-with-exception.  The only reason for its existence is to hack around lack of polymorphism.
 (define (init-vector-with-exception-int size v index e)
   (kernel ((i (iota size)))
     (if (= i index)
	 e
	 v)))

 (define (bfs (graph-cons source graph))
   (let ((size (graph-size graph)))
     (let ((cost (init-vector-with-exception-int size -1 source 0))
	   (visited (init-vector-with-exception size #f source #t))
	   (mask (init-vector-with-exception size #f source #t))
	   (updating (init-vector size #f)))
       (println "Starting the BFS.")
       (iterate-rodinia graph cost visited mask updating))))

 (define (print-cost cost file)
   (let ((stream (open_outfile file)))   
     (for (i 0 (length cost))
       (print i stream)
       (print ")" stream)
       (print " cost:" stream)
       (print (vector-ref cost i) stream)
       (print "\n" stream))
     (close_outfile stream)
     0))
	    
 (define (main)
   (println "Started main.")
   (let* ((args (command-line))
 	  (in-file (vector-ref args 1))
;;	  (graph-out-file (vector-ref args 2))
	  (result-file (vector-ref args 2))
 	  (graph-source (read-graph in-file))
	  (graph (match graph-source
			((graph-cons source graph) graph)))
	  (source (match graph-source
			((graph-cons source graph) source)))
	  (start (nanotime))
	  (cost (bfs graph-source))
	  (stop (nanotime)))
     (println* "Performed BFS in " (elapsed-sec start stop) " seconds.")
     (print-cost cost result-file)
     (print "Results saved.")
;;     (print-graph-to-file graph graph-out-file)
     0)))
