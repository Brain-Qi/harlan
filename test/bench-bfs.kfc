;; Breadth first search

(%testspec
 (%tags bench))

(module
  (extern rand () -> int)

  (define-datatype color
    (white)
    (gray)
    (black))

  (define (color-eqp c1 c2)
    (match c1
      ((white) (match c2
                 ((white) #t)
                 ((gray)  #f)
                 ((black) #f)))
      ((gray)  (match c2
                 ((white) #f)
                 ((gray)  #t)
                 ((black) #f)))
      ((black) (match c2
                 ((white) #f)
                 ((gray)  #f)
                 ((black) #t)))))
  
  (define-macro append ()
    ((_ A B)
     (let ((a A) (b B))
       (let ((lenA (length a))
             (len (+ (length a) (length b))))
         (kernel ((i (iota len)))
           (if (< i lenA)
               (vector-ref a i)
               (vector-ref b (- i lenA))))))))
  
  (define (choose_edges N max_vertex)
    (if (<= N 1)
        (vector (mod (rand) max_vertex))
        (let ((A (choose_edges (/ N 2)  max_vertex))
              (B (choose_edges (- N (/ N 2)) max_vertex)))
          (append A B))))

  (define (make-graph-inner edge_factor N remainder)
    (if (= 1 remainder)
        (vector (choose_edges edge_factor N))
        (let ((A (make-graph-inner edge_factor N (/ remainder 2)))
              (B (make-graph-inner edge_factor N (- remainder
                                                    (/ remainder 2)))))
          (append A B))))
  
  (define (make-graph edge_factor N)
    (make-graph-inner edge_factor N N))

  ;; Ideally, this would be make-graph, but we'd have to be able to do
  ;; function calls from kernels first.
  ;;(define (make-graph edge_factor N)
  ;;  (kernel ((i (iota N))) (choose_edges edge_factor N)))

  (define (iterate-colors graph colors)
    ;;(println "iterate")
    (let ((new-colors
           (kernel ((i (iota (length graph))) (c colors))
             (match c
               ((black) (black))
               ((gray)  (black))
               ((white)
                (if (reduce or (kernel ((j (vector-ref graph i)))
                                 (match (vector-ref colors j)
                                   ((white) #f)
                                   ((gray)  #t)
                                   ((black) #f))))
                    (gray)
                    (white)))))))
      (if (reduce and (kernel ((c1 new-colors)
                               (c2 colors))
                        (color-eqp c1 c2)))
          colors
          (begin
            ;;(println new-colors)
            (iterate-colors graph new-colors)))))

  (define (bfs graph start)
    (let ((colors (kernel ((i (iota (length graph))))
                    (if (= i start)
                        (gray)
                        (white)))))
      ;;(println colors)
      (iterate-colors graph colors)))
  
  (define (main)
    (let* ((start (time-s))
           (graph (make-graph 4 50))
           (stop  (time-s)))
      (print "Generated graph in ")
      (print (- stop start))
      (println " seconds.")
      (let* ((start  (time-s))
             (result (bfs graph 0))
             (stop   (time-s)))
        (print "Performed BFS in ")
        (print (- stop start))
        (println " seconds.")))
    0)
  
  )
