;; Breadth first search

(%testspec
 (%tags bench))

(module
  (extern rand () -> int)

  (define (append A B)
    (let ((lenA (length A))
          (len (+ (length A) (length B))))
      (kernel ((i (iota len)))
        (if (< i lenA)
            (vector-ref A i)
            (vector-ref B (- i lenA))))))

  ;; We wouldn't need this if we had polymorphism
  (define (append2 A B)
    (let ((lenA (length A))
          (len (+ (length A) (length B))))
      (kernel ((i (iota len)))
        (if (< i lenA)
            (vector-ref A i)
            (vector-ref B (- i lenA))))))

  (define (choose_edges N max_vertex)
    (if (<= N 1)
        (vector (mod (rand) max_vertex))
        (let ((A (choose_edges (/ N 2)  max_vertex))
              (B (choose_edges (- N (/ N 2)) max_vertex)))
          (append A B))))

  (define (make-graph-inner edge_factor N remainder)
    (if (= 1 remainder)
        (vector (choose_edges edge_factor N))
        (let ((A (make-graph-inner edge_factor N (/ remainder 2)))
              (B (make-graph-inner edge_factor N (- remainder
                                                    (/ remainder 2)))))
          (append2 A B))))
  
  (define (make-graph edge_factor N)
    (make-graph-inner edge_factor N N))

  ;; Ideally, this would be make-graph, but we'd have to be able to do
  ;; function calls from kernels first.
  ;;(define (make-graph edge_factor N)
  ;;  (kernel ((i (iota N))) (choose_edges edge_factor N)))

  (define (iterate-colors graph colors)
    (println "iterate")
    (let ((new-colors
           (kernel ((i (iota (length graph))) (c colors))
             (if (= c 2)
                 2
                 (if (= c 1)
                     2
                     ;; else, C had better be 0
                     (if (< 0 (reduce + (kernel ((j (vector-ref graph i)))
                                          (if (= (vector-ref colors j) 1)
                                              1
                                              0))))
                         1
                         0))))))
      (if (= new-colors colors)
          colors
          (begin
            (println new-colors)
            (iterate-colors graph new-colors)))))

  (define (bfs graph start)
    ;; Initialize the color vector. 0 = white, 1 = gray, 2 = black.
    (let ((colors (kernel ((i (iota (length graph))))
                    (if (= i start)
                        1
                        0))))
      (println colors)
      (iterate-colors graph colors)))
  
  (define (main)
    ;; Just kidding, this isn't actually BFS. It's testing if we can
    ;; generate random numbers.
    (let ((graph (make-graph 4 10)))
      (println graph)
      (println (bfs graph 0)))
    0)
  
  )
