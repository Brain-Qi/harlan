(module

  (import graphics)

  (define-datatype ray-result
    (miss)
    ;; The ray hits the surface and is completely absorbed, so it
    ;; should be rendered with the returned color.
    ;;
    ;; the float tells the distance so we can do occlusion when
    ;; multiple rays hit.
    (hit float point3f-t))

  (define (minimum a b)
    (if (< a b) a b))
  (define (maximum a b)
    (if (> a b) a b))

  (define (dot-prod a b)
    (match a
      ((point3f ax ay az)
       (match b
         ((point3f bx by bz)
          (+ (* ax bx) (+ (* ay by) (* az bz))))))))
  
  (define (point-diff x y)
    (match x
      ((point3f a b c)
       (match y
         ((point3f d e f)
          (point3f (- a d) (- b e) (- c f)))))))

  (define (point-add x y)
    (match x
      ((point3f a b c)
       (match y
         ((point3f x y z)
          (point3f (+ a x) (+ b y) (+ c z)))))))
  
  (define (point-div a y)
    (match a
      ((point3f a b c)
       (point3f (/ a y) (/ b y) (/ c y)))))

  (define (point-scale a y)
    (match a
      ((point3f a b c)
       (point3f (* a y) (* b y) (* c y)))))

  (define (point-mag p)
    (match p
      ((point3f a b c)
       (sqrt (+ (* a a) (+ (* b b) (* c c)))))))

  (define (unit-length p)
    (point-div p (point-mag p)))

  (define (make-diffuse-sphere center radius color)
    (let ((light-pos (point3f 5 5 -8)))
      (lambda (start direction)
        ;; Sphere / Ray interstion code adapted from
        ;; http://wiki.cgsociety.org/index.php/Ray_Sphere_Intersection
        (let ((a (dot-prod direction direction))
              (b (* 2 (dot-prod direction start)))
              (c (- (dot-prod start start) (* radius radius))))
          (let ((disc (- (* b b) (* 4 (* a c)))))
            (if (< disc 0)
                (miss)
                (let* ((dist-sqrt (sqrt disc))
                       (q (if (< b 0)
                              (* -0.5 (+ b dist-sqrt))
                              (* 0.5 (- dist-sqrt b))))
                       (t0 (/ q a))
                       (t1 (/ c q)))
                  (let ((t (maximum t0 t1)))
                    (if (< t 0)
                        (miss)
                        (let* ((pos (point-add (point-scale direction t)
                                               start))
                               (norm (unit-length (point-diff pos center)))
                               (light-dir (unit-length
                                           (point-diff pos light-pos)))
                               (color (point-add
                                       (point3f 0.2 0.2 0.2)
                                       (point-scale
                                        color
                                        (* .8 (dot-prod light-dir norm))))))
                          (hit t color)))))))))))

  (define-macro interpolate-range ()
    ((_ (i start end steps) body)
     (kernel ((j (iota steps)))
       (let ((i (+ start (* (/ (- end start) (int->float steps))
                            (int->float j)))))
         body))))

  (define-macro map2d ()
    ((_ f data)
     (kernel ((row data))
       (kernel ((x row))
         (f x)))))

  (define (rgbf->rgbi x)
    (match x
      ((point3f r g b)
       (point3i (float->int (* r 256))
                (float->int (* g 256))
                (float->int (* b 256))))))
  
  (define (main)
    (let ((scene (vector (make-diffuse-sphere (point3f 0 0 0)
                                              1
                                              (point3f 0 1 1))))
          (width 256)
          (height 256)
          (origin (point3f 0 0 -3)))
      (let ((img (interpolate-range
                  (x -1 1 width)
                  (interpolate-range
                   (y 1 -1 height) ;; y coordinate is upside down.
                   (let ((dir (unit-length (point-diff (point3f x y 0)
                                                       origin)))
                         (object (vector-ref scene 0)))
                     (match (object origin dir)
                       ((miss) (point3f 0 0 0))
                       ((hit dist color) color)))))))
        (write-ppm "test.bin/raytrace.ppm"
                   (map2d (lambda (x) (rgbf->rgbi x)) img))))
    0)
      
  )
